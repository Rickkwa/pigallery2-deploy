events {

}

http {

    ##
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    ##
    # SSL Settings
    ##

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    ##
    # Logging Settings
    ##

    log_format with_cf_ip '$remote_addr ($http_cf_connecting_ip) - $remote_user [$time_local] '
                           '"$request" $status $request_time $body_bytes_sent '
                           '"$http_referer" "$http_user_agent"';
    log_format logger_json escape=json  '{'
                                            '"timestamp": "$time_iso8601", '
                                            '"ip": "$remote_addr", '
                                            '"cf_ip": "$http_cf_connecting_ip", '
                                            '"request": "$request", '
                                            '"status": "$status", '
                                            '"duration": "$request_time", '
                                            '"body_bytes": "$body_bytes_sent", '
                                            '"referer": "$http_referer", '
                                            '"ua": "$http_user_agent"'
                                        '}';
    access_log /usr/local/openresty/nginx/logs/access.log logger_json;
    error_log /usr/local/openresty/nginx/logs/error.log;

    # Send logs to shared volume for promtail
    access_log /app/logs/nginx_access.log logger_json;
    error_log /app/logs/nginx_error.log;

    ##
    # Gzip Settings
    ##

    gzip on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/css
        text/plain
        text/javascript
        text/markdown
        application/javascript
        application/json
        application/gpx+xml
        application/x-javascript
        application/xml
        application/xml+rss
        application/xhtml+xml
        application/x-font-ttf
        application/x-font-opentype
        application/vnd.ms-fontobject
        image/svg+xml
        image/x-icon
        application/rss+xml
        application/atom_xml;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    ##
    # Setup prometheus metrics
    ##

    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/usr/local/openresty/site/lualib/?.lua;;";

    init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics")

        metric_requests = prometheus:counter(
            "nginx_http_requests_total", "Number of HTTP requests", {"host", "status", "location"})
        metric_latency = prometheus:histogram(
            "nginx_http_request_duration_seconds", "HTTP request latency", {"host", "location"})
        metric_connections = prometheus:gauge(
            "nginx_http_connections", "Number of HTTP connections", {"state"})
    }

    log_by_lua_block {
        if ngx.var.uri ~= "/metrics" then
            metric_requests:inc(1, {ngx.var.server_name, ngx.var.status, ngx.var.location})
            metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name, ngx.var.location})
        end
    }

    map $host $is_directly_accessed {
        default 0;
        "127.0.0.1" 0;
        "~^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$" 1;
    }


    ##
    # Virtual Host Configs
    ##

    server {
        listen 80 default_server;
        listen [::]:80 default_server;

        server_name $hostname;

        # Disallow access via direct IP
        if ($is_directly_accessed) {
            return 403;
        }

        location /pgapi { # NOTE: no ending '/' as it would forward /pgapi to /
            proxy_pass http://pigallery2:80; # forwarding to the other container, named 'pigallery2'
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
        location /custom-resources {
            limit_except GET {
                deny all;
            }
            alias /app/custom-resources/;
        }
        location / {
            limit_except GET {
                deny  all;
            }
            proxy_pass http://pigallery2:80; # forwarding to the other container, named 'pigallery2'
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
        location = /robots.txt {
            alias /app/custom-resources/robots.txt;
        }
    }

    server {
        listen 8080;

        location = /metrics {
            access_log off;
            auth_basic off;
            content_by_lua_block {
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})
                prometheus:collect()
            }
        }
    }
}
